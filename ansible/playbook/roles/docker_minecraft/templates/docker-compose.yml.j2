services:
    Minecraft:
        image: "{{ docker_minecraft_minecraft_image }}"
        container_name: "Minecraft"
        volumes:
            - "{{ docker_minecraft_dir }}/data:/data"
        ports:
            - "25565:25565"
        tty: true
        stdin_open: true
        environment:
            EULA: TRUE
            MEMORY: {{ docker_minecraft_memory }}
            ENABLE_ROLLING_LOGS: TRUE
            VERSION: {{ docker_minecraft_version }}
            OVERRIDE_SERVER_PROPERTIES: FALSE

            TYPE: FABRIC
            MODRINTH_PROJECTS: |
                fabric-api

            # mc_missile settings #
            MC_MISSILE_GUIDANCE_PORT: "42069"
            # Prefix of the address used to connect to the guidance and control server.
            # Set this to something that isn't a prefix of any other address on your network.
            MC_MISSILE_GUIDANCE_CONTROL_ADDRESS_PREFIX: "MinecraftGuidanceControl"
            MC_MISSILE_LOCALHOST_GUIDANCE_CONTROL: false
            MC_MISSILE_GUIDANCE_CONNECTION_IDS: "{{ docker_minecraft_guidance_servers | map(attribute='connection_id') | list | join(',') }}"
        networks: ["guidance", "mc_server_to_internet"]
        restart: unless-stopped

{% for guidance_server in docker_minecraft_guidance_servers %}
    MinecraftGuidanceControl{{ guidance_server.connection_id }}:
        image: "{{ guidance_server.image }}"
        container_name: "MinecraftGuidanceControl{{ guidance_server.connection_id }}"
        networks: ["guidance"]
        environment:
            PORT: "42069"

{% endfor %}

    MinecraftStats:
        image: "{{ docker_minecraft_minecraft_stats_image }}"
        container_name: "MinecraftStats"
        environment:
            # configures the DockerCron container to send a SIGHUP to this container every five minutes
            CRON_TIME: "*/5 * * * *"
        volumes:
            - "{{ docker_minecraft_dir }}/data/:/app/serverfiles:ro"
            - ./config.json:/app/config.json:ro
            - "{{ docker_minecraft_dir }}/web:/app/www"
        restart: unless-stopped

    # web server for minecraft stats
    MinecraftWeb:
        image: "{{ docker_minecraft_nginx_image }}"
        container_name: "MinecraftWeb"
        volumes:
            - "{{ docker_minecraft_dir }}/web:/usr/share/nginx/html:ro"
        environment:
            LETSENCRYPT_HOST: {{ docker_minecraft_web_domain }}
            VIRTUAL_HOST: {{ docker_minecraft_web_domain }}
        restart: unless-stopped
        networks: ["net"]

    # web server for minecraft_map_marker
    MinecraftMapMarkerWeb:
        image: "{{ docker_minecraft_nginx_image }}"
        container_name: "MinecraftMapMarkerWeb"
        volumes:
            - "{{ docker_minecraft_dir }}/minecraft_map_marker/:/usr/share/nginx/html:ro"
        environment:
            LETSENCRYPT_HOST: {{ docker_minecraft_map_marker_web_domain }}
            VIRTUAL_HOST: {{ docker_minecraft_map_marker_web_domain }}
        restart: unless-stopped
        networks: ["net"]

    MinecraftMapMarkerRenderer:
        image: "{{ docker_minecraft_minecraft_map_marker }}"
        container_name: "MinecraftMapMarker"
        environment:
            CRON_TIME: "*/5 * * * *"
        volumes:
            - "{{ docker_minecraft_dir }}/data/world:/world:ro"
            - "{{ docker_minecraft_dir }}/minecraft_map_marker/:/web"
        restart: unless-stopped

    MinecraftBorgBackup:
        image: "{{ docker_minecraft_borg_image }}"
        volumes:
            - "{{ docker_minecraft_dir }}:/origin:ro"
            - "{{ docker_minecraft_borg_dir }}:/repo"
            # needs to be able to start and stop other containers
            - "{{ docker_socket }}:/var/run/docker.sock:rw"
        environment:
            CRON_TIME: "{{ docker_minecraft_borg_cron }}"
            BORG_COMPRESSION: zstd,10
            BORG_PREFIX: minecraft
            PRUNE_CFG: "{{ borg_prune_cfg }}"
            # stop these containers before backup
            CONTAINERS: "Minecraft MinecraftStats MinecraftWeb MinecraftMapMarkerWeb MinecraftMapMarker"
        restart: "unless-stopped"

networks:
    net:
        external: true
    guidance:
        internal: true
    mc_server_to_internet:
