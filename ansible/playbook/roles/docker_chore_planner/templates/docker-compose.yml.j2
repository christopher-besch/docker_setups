services:
    ChorePlanner:
        image: "{{ docker_chore_planner_chore_planner_image }}"
        container_name: "ChorePlanner"

        volumes:
            - "{{ docker_chore_planner_dir }}/data:/var/run/data"

        environment:
            ####################
            # Generel Settings #
            ####################
            CHORE_PLANNER_DB_PATH: /var/run/data/chore_planner.sqlite
            # This advances the current week to the next every time the weekly action is performed.
            # set to true for actual deployment
            CHORE_PLANNER_DEBUG: false
            # how many weeks to plan into the future
            CHORE_PLANNER_WEEKS_TO_PLAN: "{{ docker_chore_planner_weeks_to_plan }}"
            # probability distribution parameter between in [0, 1]
            # The higher gamma the more extremely the score effects the tenants probability of being
            # chosen for a chore.
            # 0 results the tenant with the highest score to never be picked (unless all tenants have the
            #   same score).
            # 1 results in all tenants having the same probability regardless of their score.
            #
            # See the mathematical proof in docs/probability_distribution.pdf in the repo
            CHORE_PLANNER_GAMMA: "{{ docker_chore_planner_gamma }}"
            # When the chore_planner never ran before or was upgraded to v1.0.0 the chore_planner doesn't know when it ran last.
            # The fallback week is used in this case.
            # When this is true, the last week is used.
            #     This means the chore_planner prints out the weekly message at the first weekly action (i.e., the first SIGHUP), which is what you want.
            # When this is false, the current week is used.
            #     This means the chore_planner only advances the current week at the start of the next week. This should only be used when you upgraded the chore_planner to v1.0.0
            #     and the weekly message for the current week has already been sent.
            CHORE_PLANNER_FALLBACK_TO_LAST_WEEK: true
            # When true the chore_planner tries to exclude busy tenants from chore assignments for this week.
            # Busy tenants are those already doing a chore the last, this or the next week.
            # If you want to prevent the same tenant doing two chores in the same week, enable this.
            CHORE_PLANNER_TRY_EXCLUDE_BUSY_TENANTS: true
            # When should the weekly action be performed?
            # This environment variable is understood by the docker_cron container
            CRON_TIME: "{{ docker_chore_planner_weekly_action_cron }}"
            # One of:
            #   Signal
            #   Telegram
            CHORE_PLANNER_CHAT_PROTOCOL: Telegram

            #####################
            # Telegram Settings #
            #####################
            # the token of the telegram bot
            TELEGRAM_BOT_TOKEN: "{{ docker_chore_planner_telegram_token }}"
            # the id of the chat the bot should listen on
            # Set this to a random value if you don't know your id yet.
            # You'll get an error message telling you the chat_id when the bot receives a new message.
            TELEGRAM_CHAT_ID: "{{ docker_chore_planner_telegram_chat_id }}"

        restart: "unless-stopped"

    ChorePlannerBorgBackup:
        image: "{{ docker_chore_planner_borg_image }}"
        volumes:
            - "{{ docker_chore_planner_dir }}:/origin:ro"
            - "{{ docker_chore_planner_borg_dir }}:/repo"
            # needs to be able to start and stop other containers
            - "{{ docker_socket }}:/var/run/docker.sock:rw"
        environment:
            CRON_TIME: "{{ docker_chore_planner_borg_cron }}"
            BORG_COMPRESSION: zstd,10
            BORG_PREFIX: nextcloud
            PRUNE_CFG: "{{ borg_prune_cfg }}"
            # stop these containers before backup
            CONTAINERS: "ChorePlanner"
        restart: "unless-stopped"
